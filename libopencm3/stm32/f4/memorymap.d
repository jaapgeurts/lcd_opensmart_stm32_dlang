module libopencm3.stm32.f4.memorymap;

public import libopencm3.cm3.memorymap;

/* --- STM32F4 specific peripheral definitions ----------------------------- */

/* Memory map for all busses */
enum FLASH_BASE = 0x08000000U;
enum PERIPH_BASE = 0x40000000U;
enum PERIPH_BASE_APB1 = PERIPH_BASE + 0x00000;
enum PERIPH_BASE_APB2 = PERIPH_BASE + 0x10000;
enum PERIPH_BASE_AHB1 = PERIPH_BASE + 0x20000;
enum PERIPH_BASE_AHB2 = 0x50000000U;
enum PERIPH_BASE_AHB3 = 0x60000000U;

/* Register boundary addresses */

/* APB1 */
enum TIM2_BASE = PERIPH_BASE_APB1 + 0x0000;
enum TIM3_BASE = PERIPH_BASE_APB1 + 0x0400;
enum TIM4_BASE = PERIPH_BASE_APB1 + 0x0800;
enum TIM5_BASE = PERIPH_BASE_APB1 + 0x0c00;
enum TIM6_BASE = PERIPH_BASE_APB1 + 0x1000;
enum TIM7_BASE = PERIPH_BASE_APB1 + 0x1400;
enum TIM12_BASE = PERIPH_BASE_APB1 + 0x1800;
enum TIM13_BASE = PERIPH_BASE_APB1 + 0x1c00;
enum TIM14_BASE = PERIPH_BASE_APB1 + 0x2000;
enum LPTIM1_BASE = PERIPH_BASE_APB1 + 0x2400;
enum RTC_BASE = PERIPH_BASE_APB1 + 0x2800;
enum WWDG_BASE = PERIPH_BASE_APB1 + 0x2c00;
enum IWDG_BASE = PERIPH_BASE_APB1 + 0x3000;
enum I2S2_EXT_BASE = PERIPH_BASE_APB1 + 0x3400;
enum SPI2_BASE = PERIPH_BASE_APB1 + 0x3800;
enum SPI3_BASE = PERIPH_BASE_APB1 + 0x3c00;
enum I2S3_EXT_BASE = PERIPH_BASE_APB1 + 0x4000;
enum USART2_BASE = PERIPH_BASE_APB1 + 0x4400;
enum USART3_BASE = PERIPH_BASE_APB1 + 0x4800;
enum UART4_BASE = PERIPH_BASE_APB1 + 0x4c00;
enum UART5_BASE = PERIPH_BASE_APB1 + 0x5000;
enum I2C1_BASE = PERIPH_BASE_APB1 + 0x5400;
enum I2C2_BASE = PERIPH_BASE_APB1 + 0x5800;
enum I2C3_BASE = PERIPH_BASE_APB1 + 0x5C00;
enum FMPI2C1_BASE = PERIPH_BASE_APB1 + 0x6000;
enum BX_CAN1_BASE = PERIPH_BASE_APB1 + 0x6400;
enum BX_CAN2_BASE = PERIPH_BASE_APB1 + 0x6800;
/* PERIPH_BASE_APB1 + 0x6C00 (0x4000 6C00 - 0x4000 6FFF): Reserved */
enum POWER_CONTROL_BASE = PERIPH_BASE_APB1 + 0x7000;
enum DAC_BASE = PERIPH_BASE_APB1 + 0x7400;
enum UART7_BASE = PERIPH_BASE_APB1 + 0x7800;
enum UART8_BASE = PERIPH_BASE_APB1 + 0x7c00;
/* PERIPH_BASE_APB1 + 0x7800 (0x4000 8000 - 0x4000 FFFF): Reserved */

/* APB2 */
enum TIM1_BASE = PERIPH_BASE_APB2 + 0x0000;
enum TIM8_BASE = PERIPH_BASE_APB2 + 0x0400;
/* PERIPH_BASE_APB2 + 0x0800 (0x4001 0800 - 0x4001 0FFF): Reserved */
enum USART1_BASE = PERIPH_BASE_APB2 + 0x1000;
enum USART6_BASE = PERIPH_BASE_APB2 + 0x1400;
/* PERIPH_BASE_APB2 + 0x1800 (0x4001 1800 - 0x4001 1FFF): Reserved */
enum ADC1_BASE = PERIPH_BASE_APB2 + 0x2000;
enum ADC2_BASE = PERIPH_BASE_APB2 + 0x2100;
enum ADC3_BASE = PERIPH_BASE_APB2 + 0x2200;
enum ADC_COMMON_BASE = PERIPH_BASE_APB2 + 0x2300;
/* PERIPH_BASE_APB2 + 0x2400 (0x4001 2400 - 0x4001 27FF): Reserved */
enum SDIO_BASE = PERIPH_BASE_APB2 + 0x2C00;
/* PERIPH_BASE_APB2 + 0x2C00 (0x4001 2C00 - 0x4001 2FFF): Reserved */
enum SPI1_BASE = PERIPH_BASE_APB2 + 0x3000;
enum SPI4_BASE = PERIPH_BASE_APB2 + 0x3400;
/* PERIPH_BASE_APB2 + 0x3500 (0x4001 3500 - 0x4001 37FF): Reserved */
enum SYSCFG_BASE = PERIPH_BASE_APB2 + 0x3800;
enum EXTI_BASE = PERIPH_BASE_APB2 + 0x3C00;
enum TIM9_BASE = PERIPH_BASE_APB2 + 0x4000;
enum TIM10_BASE = PERIPH_BASE_APB2 + 0x4400;
enum TIM11_BASE = PERIPH_BASE_APB2 + 0x4800;
/* PERIPH_BASE_APB2 + 0x4C00 (0x4001 4C00 - 0x4001 4FFF): Reserved */
enum SPI5_BASE = PERIPH_BASE_APB2 + 0x5000;
enum SPI6_BASE = PERIPH_BASE_APB2 + 0x5400;
enum SAI1_BASE = PERIPH_BASE_APB2 + 0x5800;
enum LTDC_BASE = PERIPH_BASE_APB2 + 0x6800;
enum DSI_BASE = PERIPH_BASE_APB2 + 0x6C00;
/* PERIPH_BASE_APB2 + 0x7400 (0x4001 7400 - 0x4001 FFFF): Reserved */

/* AHB1 */
enum GPIO_PORT_A_BASE = PERIPH_BASE_AHB1 + 0x0000;
enum GPIO_PORT_B_BASE = PERIPH_BASE_AHB1 + 0x0400;
enum GPIO_PORT_C_BASE = PERIPH_BASE_AHB1 + 0x0800;
enum GPIO_PORT_D_BASE = PERIPH_BASE_AHB1 + 0x0C00;
enum GPIO_PORT_E_BASE = PERIPH_BASE_AHB1 + 0x1000;
enum GPIO_PORT_F_BASE = PERIPH_BASE_AHB1 + 0x1400;
enum GPIO_PORT_G_BASE = PERIPH_BASE_AHB1 + 0x1800;
enum GPIO_PORT_H_BASE = PERIPH_BASE_AHB1 + 0x1C00;
enum GPIO_PORT_I_BASE = PERIPH_BASE_AHB1 + 0x2000;
enum GPIO_PORT_J_BASE = PERIPH_BASE_AHB1 + 0x2400;
enum GPIO_PORT_K_BASE = PERIPH_BASE_AHB1 + 0x2800;
/* PERIPH_BASE_AHB1 + 0x2C00 (0x4002 2C00 - 0x4002 2FFF): Reserved */
enum CRC_BASE = PERIPH_BASE_AHB1 + 0x3000;
/* PERIPH_BASE_AHB1 + 0x3400 (0x4002 3400 - 0x4002 37FF): Reserved */
enum RCC_BASE = PERIPH_BASE_AHB1 + 0x3800;
enum FLASH_MEM_INTERFACE_BASE = PERIPH_BASE_AHB1 + 0x3C00;
enum BKPSRAM_BASE = PERIPH_BASE_AHB1 + 0x4000;
/* PERIPH_BASE_AHB1 + 0x5000 (0x4002 5000 - 0x4002 5FFF): Reserved */
enum DMA1_BASE = PERIPH_BASE_AHB1 + 0x6000;
enum DMA2_BASE = PERIPH_BASE_AHB1 + 0x6400;
/* PERIPH_BASE_AHB1 + 0x6800 (0x4002 6800 - 0x4002 7FFF): Reserved */
enum ETHERNET_BASE = PERIPH_BASE_AHB1 + 0x8000;
enum DMA2D_BASE = PERIPH_BASE_AHB1 + 0xB000U;
/* PERIPH_BASE_AHB1 + 0x9400 (0x4002 9400 - 0x4003 FFFF): Reserved */
enum USB_OTG_HS_BASE = PERIPH_BASE_AHB1 + 0x20000;
/* PERIPH_BASE_AHB1 + 0x60000 (0x4008 0000 - 0x4FFF FFFF): Reserved */

/* AHB2 */
enum USB_OTG_FS_BASE = PERIPH_BASE_AHB2 + 0x00000;
/* PERIPH_BASE_AHB2 + 0x40000 (0x5004 0000 - 0x5004 FFFF): Reserved */
enum DCMI_BASE = PERIPH_BASE_AHB2 + 0x50000;
/* PERIPH_BASE_AHB2 + 0x50400 (0x5005 0400 - 0x5005 FFFF): Reserved */
enum CRYP_BASE = PERIPH_BASE_AHB2 + 0x60000;
enum HASH_BASE = PERIPH_BASE_AHB2 + 0x60400;
/* PERIPH_BASE_AHB2 + 0x60C00 (0x5006 0C00 - 0x5006 07FF): Reserved */
enum RNG_BASE = PERIPH_BASE_AHB2 + 0x60800;
/* PERIPH_BASE_AHB2 + 0x61000 (0x5006 1000 - 0x5FFF FFFF): Reserved */

/* AHB3 */
/* Address: 0x60000000 */
enum FMC_BANK1 = PERIPH_BASE_AHB3;
/* Address: 0x70000000 */
enum FMC_BANK2 = PERIPH_BASE_AHB3 + 0x10000000U;
/* Address: 0x80000000 */
enum FMC_BANK3 = PERIPH_BASE_AHB3 + 0x20000000U;
/* Address: 0x90000000 */
enum QUADSPI_BANK = PERIPH_BASE_AHB3 + 0x30000000U;
enum FSMC_BASE = PERIPH_BASE_AHB3 + 0x40000000U;
enum FMC_BASE = PERIPH_BASE_AHB3 + 0x40000000U;
enum QUADSPI_BASE = PERIPH_BASE_AHB3 + 0x40001000U;
/* Address: 0xC0000000 */
enum FMC_BANK5 = PERIPH_BASE_AHB3 + 0x60000000U;
/* Address: 0xD0000000 */
enum FMC_BANK6 = PERIPH_BASE_AHB3 + 0x70000000U;

/* PPIB */
enum DBGMCU_BASE = PPBI_BASE + 0x00042000;

/* Device Electronic Signature */
enum DESIG_FLASH_SIZE_BASE = 0x1FFF7A22U;
enum DESIG_UNIQUE_ID_BASE = 0x1FFF7A10U;
enum DESIG_UNIQUE_ID0 = MMIO32!(DESIG_UNIQUE_ID_BASE);
enum DESIG_UNIQUE_ID1 = MMIO32!(DESIG_UNIQUE_ID_BASE + 4);
enum DESIG_UNIQUE_ID2 = MMIO32!(DESIG_UNIQUE_ID_BASE + 8);

/* ST provided factory calibration values @ 3.3V */
enum ST_VREFINT_CAL = MMIO16!(0x1FFF7A2A);
enum ST_TSENSE_CAL1_30C = MMIO16!(0x1FFF7A2C);
enum ST_TSENSE_CAL2_110C = MMIO16!(0x1FFF7A2E);
